@page "/voice"
@inject ISpeechService SpeechService
@using Microsoft.Maui.ApplicationModel
@using VoiceRecognition.Abstractions
@namespace VoiceRecognition.Components.Pages

<div class="assistant-wrapper">
    <div class="assistant-container @(SpeechService.IsListening ? "active" : "")">
        <h3>Voice Recognition</h3>
        <div class="status">@status</div>

        <button class="mic-button @(SpeechService.IsListening ? "listening" : "")"
                @onclick="ToggleListening">
            <span>@(SpeechService.IsListening ? "🛑" : "🎤")</span>
        </button>

        <div class="waveform">
            <div class="bar" style="height:@BarHeights[0]px"></div>
            <div class="bar" style="height:@BarHeights[1]px"></div>
            <div class="bar" style="height:@BarHeights[2]px"></div>
            <div class="bar" style="height:@BarHeights[3]px"></div>
            <div class="bar" style="height:@BarHeights[4]px"></div>
        </div>
    </div>
</div>

@code {
    string recognizedText = "";
    string status = "Скажи что-нибудь…";

    int[] BarHeights = new int[5];

    protected override void OnInitialized()
    {
        SpeechService.PartialResult += s =>
        {
            recognizedText = s;
            InvokeAsync(StateHasChanged);
        };

        SpeechService.FinalResult += async s =>
        {
            recognizedText = s;
            status = "Готово";
            await InvokeAsync(StateHasChanged);
            await SearchInBrowser();
        };

        // Подписка на VolumeChanged
        SpeechService.VolumeChanged += vol =>
        {
            for (int i = 0; i < BarHeights.Length; i++)
                BarHeights[i] = 10 + (int)(vol * 5 * (i + 1) / BarHeights.Length); // масштабируем полоски
            InvokeAsync(StateHasChanged);
        };
    }

    async Task ToggleListening()
    {
        if (!SpeechService.IsListening)
        {
            status = "Слушаю…";
            recognizedText = "";
            await SpeechService.StartListeningAsync();
        }
        else
        {
            await SpeechService.StopListeningAsync();
            status = "Останавливаю…";
            await SearchInBrowser();
            status = "Скажи что-нибудь…";
        }

        StateHasChanged();
    }

    async Task SearchInBrowser()
    {
        if (string.IsNullOrWhiteSpace(recognizedText)) return;
        var q = Uri.EscapeDataString(recognizedText);
        var url = $"https://www.google.com/search?q={q}";
        await Launcher.OpenAsync(new Uri(url));
    }
}
